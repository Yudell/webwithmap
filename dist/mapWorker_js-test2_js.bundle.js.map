{"version":3,"file":"mapWorker_js-test2_js.bundle.js","mappings":"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;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;;;;;WCRA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WClBA;;WAEA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,aAAa;WACb;WACA;WACA;WACA;;WAEA;WACA;WACA;;WAEA;;WAEA;;;;;WCpCA;WACA;WACA;WACA;;;;;UEHA;UACA","sources":["webpack:///./mapWorker.js","webpack:///./mapgen.js","webpack:///./test2.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/chunk loaded","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/ensure chunk","webpack:///webpack/runtime/get javascript chunk filename","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/runtime/publicPath","webpack:///webpack/runtime/importScripts chunk loading","webpack:///webpack/runtime/startup chunk dependencies","webpack:///webpack/before-startup","webpack:///webpack/startup","webpack:///webpack/after-startup"],"sourcesContent":["import { createNoise, newFractalNoise, defaultOctaves, defaultFrequency, defaultPersistence, generateRandomSeed } from './mapgen.js';\r\nimport { generateMap, generateRivers, terrainType } from './test2.js';\r\n\r\nself.onmessage = function(event) {\r\n  const { mapWidth, mapHeight, terrainSeed, variantSeed, biomeSeed } = event.data;\r\n\r\n  const terrainNoise = createNoise(terrainSeed);\r\n  const variantNoise = createNoise(variantSeed);\r\n  const biomeNoise = createNoise(biomeSeed);\r\n\r\n  const getTerrainNoise = newFractalNoise({\r\n    noise: terrainNoise,\r\n    octaves: defaultOctaves,\r\n    frequency: defaultFrequency,\r\n    persistence: defaultPersistence\r\n  });\r\n\r\n  const getVariantNoise = newFractalNoise({\r\n    noise: variantNoise,\r\n    octaves: defaultOctaves,\r\n    frequency: defaultFrequency,\r\n    persistence: defaultPersistence\r\n  });\r\n\r\n  const getBiomeNoise = newFractalNoise({\r\n    noise: biomeNoise,\r\n    octaves: defaultOctaves,\r\n    frequency: defaultFrequency,\r\n    persistence: defaultPersistence\r\n  });\r\n\r\n  const map = generateMap(mapWidth, mapHeight, getTerrainNoise, getVariantNoise, getBiomeNoise);\r\n  generateRivers(map, map.map(row => row.map(cell => cell.type === terrainType.MOUNTAIN ? 1 : 0)), 250);\r\n\r\n  self.postMessage(map);\r\n};","import { makeNoise2D } from 'open-simplex-noise';\r\n\r\nfunction generateRandomSeed() {\r\n  return Math.floor(Math.random() * Math.pow(2, 32));\r\n}\r\n\r\nfunction createNoise(seed) {\r\n  return makeNoise2D(seed);\r\n}\r\n\r\nfunction newFractalNoise(info) {\r\n  const {\r\n    noise,\r\n    octaves = defaultOctaves,\r\n    amplitude = 1,\r\n    frequency = defaultFrequency,\r\n    persistence = defaultPersistence\r\n  } = info;\r\n\r\n  return function getFractalNoise(x, y) {\r\n    let value = 0.0;\r\n\r\n    for (let octave = 0; octave < octaves; octave++) {\r\n      let freq = frequency * Math.pow(2, octave);\r\n\r\n      value += noise(\r\n        x * freq,\r\n        y * freq\r\n      ) * (amplitude * Math.pow(persistence, octave));\r\n    }\r\n\r\n    return value / (2 - 1 / Math.pow(2, octaves - 1));\r\n  };\r\n}\r\n\r\nconst defaultOctaves = 10;\r\nconst defaultFrequency = 0.2;\r\nconst defaultPersistence = 0.65;\r\n\r\nexport {\r\n  createNoise,\r\n  newFractalNoise,\r\n  defaultOctaves,\r\n  defaultFrequency,\r\n  defaultPersistence,\r\n  generateRandomSeed\r\n};","import { createNoise, newFractalNoise, defaultOctaves, defaultFrequency, defaultPersistence, generateRandomSeed } from './mapgen.js';\r\n\r\nexport const terrainType = {\r\n  OCEAN: 'OCEAN',\r\n  SEA: 'SEA',\r\n  WET_SAND: 'WET_SAND',\r\n  SAND: 'SAND',\r\n  DRY_SAND: 'DRY_SAND',\r\n  DRY_GRASS: 'DRY_GRASS',\r\n  GRASS: 'GRASS',\r\n  WET_GRASS: 'WET_GRASS',\r\n  MOUNTAIN_SNOW: 'MOUNTAIN_SNOW',\r\n  MOUNTAIN_ORE: 'MOUNTAIN_ORE',\r\n  MOUNTAIN: 'MOUNTAIN',\r\n  DESERT: 'DESERT',\r\n  RIVER: 'RIVER',\r\n};\r\n\r\nexport function generateMap(width, height, terrainNoise, variantNoise, biomeNoise) {\r\n  const map = [];\r\n  const heightMap = [];\r\n  \r\n  for (let y = 0; y < height; y++) {\r\n    map[y] = [];\r\n    heightMap[y] = [];\r\n    for (let x = 0; x < width; x++) {\r\n      const terrainValue = terrainNoise(x / 100, y / 100);\r\n      const variantValue = variantNoise(x / 100, y / 100);\r\n      const biomeValue = biomeNoise(x / 100, y / 100);\r\n      let info = {};\r\n\r\n      if (terrainValue < 0) {\r\n        info.color = '#003eb2';\r\n        info.type = terrainType.OCEAN;\r\n      } else if (terrainValue < 0.2) {\r\n        info.color = '#0952c6';\r\n        info.type = terrainType.SEA;\r\n      } else if (terrainValue < 0.22) {\r\n        info.variantNoise = variantValue;\r\n        if (variantValue < -0.2) {\r\n          info.color = '#867645';\r\n          info.type = terrainType.WET_SAND;\r\n        } else if (variantValue < 0.2) {\r\n          info.color = '#a49463';\r\n          info.type = terrainType.SAND;\r\n        } else {\r\n          info.color = '#c2b281';\r\n          info.type = terrainType.DRY_SAND;\r\n        }\r\n      } else if (biomeValue > 0.5) {\r\n        info.color = '#f0e68c';\r\n        info.type = terrainType.DESERT;\r\n      } else if (terrainValue < 0.5) {\r\n        info.variantNoise = variantValue;\r\n        if (variantValue < -0.2) {\r\n          info.color = '#284d00';\r\n          info.type = terrainType.DRY_GRASS;\r\n        } else if (variantValue < 0.2) {\r\n          info.color = '#3c6114';\r\n          info.type = terrainType.GRASS;\r\n        } else {\r\n          info.color = '#5a7f32';\r\n          info.type = terrainType.WET_GRASS;\r\n        }\r\n      } else {\r\n        info.variantNoise = variantValue;\r\n        if (variantValue < -0.2) {\r\n          info.color = '#ebebeb';\r\n          info.type = terrainType.MOUNTAIN_SNOW;\r\n        } else if (variantValue < 0.2) {\r\n          info.color = '#8c8e7b';\r\n          info.type = terrainType.MOUNTAIN_ORE;\r\n        } else {\r\n          info.color = '#a0a28f';\r\n          info.type = terrainType.MOUNTAIN;\r\n        }\r\n      }\r\n\r\n      map[y][x] = info;\r\n      heightMap[y][x] = terrainValue;\r\n    }\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\nexport function generateRivers(map, heightMap, averageRiverLength) {\r\n  const width = map[0].length;\r\n  const height = map.length;\r\n  const riverSources = [];\r\n  const directions = [\r\n    { dx: 0, dy: 1 },  // вниз\r\n    { dx: 0, dy: -1 }, // вверх\r\n    { dx: -1, dy: 0 }, // влево\r\n    { dx: 1, dy: 0 },  // вправо\r\n    { dx: 1, dy: 1 },  // вправо-вниз\r\n    { dx: -1, dy: -1 },// влево-вверх\r\n    { dx: -1, dy: 1 }, // влево-вниз\r\n    { dx: 1, dy: -1 }  // вправо-вверх\r\n  ];\r\n\r\n  const oppositeDirections = {\r\n    '0,1': '0,-1',\r\n    '0,-1': '0,1',\r\n    '-1,0': '1,0',\r\n    '1,0': '-1,0',\r\n    '1,1': '-1,-1',\r\n    '-1,-1': '1,1',\r\n    '-1,1': '1,-1',\r\n    '1,-1': '-1,1'\r\n  };\r\n\r\n  for (let y = 0; y < height; y++) {\r\n    for (let x = 0; x < width; x++) {\r\n      if ((map[y][x].type === terrainType.MOUNTAIN || map[y][x].type === terrainType.MOUNTAIN_ORE || map[y][x].type === terrainType.WET_GRASS || map[y][x].type === terrainType.DRY_GRASS || map[y][x].type === terrainType.GRASS) && Math.random() < 0.000085) {\r\n        riverSources.push({ x, y });\r\n      }\r\n    }\r\n  }\r\n\r\n  const riverTerminationProbability = 0.01 / averageRiverLength;\r\n\r\n  riverSources.forEach(source => {\r\n    let current = source;\r\n    let riverDirection = directions[Math.floor(Math.random() * directions.length)];\r\n    const visited = new Set();\r\n    visited.add(`${current.x},${current.y}`);\r\n    let riverLength = 0;\r\n    let previousDirection = null;\r\n\r\n    while (current) {\r\n      map[current.y][current.x].type = terrainType.RIVER;\r\n      map[current.y][current.x].color = '#0952c6';\r\n      map[current.y][current.x].width = Math.min(3, Math.floor(riverLength / 120) + 1);\r\n\r\n      riverLength++;\r\n\r\n      let next = null;\r\n      let minHeight = heightMap[current.y][current.x];\r\n      const possibleDirections = [\r\n        riverDirection,\r\n        { dx: riverDirection.dx + 1, dy: riverDirection.dy },\r\n        { dx: riverDirection.dx - 1, dy: riverDirection.dy },\r\n        { dx: riverDirection.dx, dy: riverDirection.dy + 1 },\r\n        { dx: riverDirection.dx, dy: riverDirection.dy - 1 }\r\n      ].filter(dir => dir.dx >= -1 && dir.dx <= 1 && dir.dy >= -1 && dir.dy <= 1 && `${dir.dx},${dir.dy}` !== oppositeDirections[`${riverDirection.dx},${riverDirection.dy}`] && `${dir.dx},${dir.dy}` !== previousDirection);\r\n\r\n      possibleDirections.sort(() => Math.random() - 0.65);\r\n\r\n      for (const dir of possibleDirections) {\r\n        const ny = current.y + dir.dy;\r\n        const nx = current.x + dir.dx;\r\n        if (ny >= 0 && ny < height && nx >= 0 && nx < width && !visited.has(`${nx},${ny}`)) {\r\n          if (heightMap[ny][nx] < minHeight) {\r\n            minHeight = heightMap[ny][nx];\r\n            next = { x: nx, y: ny };\r\n            previousDirection = `${riverDirection.dx},${riverDirection.dy}`;\r\n            riverDirection = dir;\r\n          } else if (heightMap[ny][nx] === minHeight && Math.random() < 0.005) {\r\n            next = { x: nx, y: ny };\r\n            previousDirection = `${riverDirection.dx},${riverDirection.dy}`;\r\n            riverDirection = dir;\r\n          } else {\r\n            next = { x: nx, y: ny };\r\n          }\r\n        }\r\n      }\r\n\r\n      if (next && (map[next.y][next.x].type === terrainType.OCEAN || map[next.y][next.x].type === terrainType.SEA || map[next.y][next.x].type === terrainType.RIVER)) {\r\n        map[next.y][next.x].type = terrainType.RIVER;\r\n        map[next.y][next.x].color = '#0952c6';\r\n        map[next.y][next.x].width = Math.min(3, Math.floor(riverLength / 120) + 1);\r\n        break;\r\n      }\r\n\r\n      if (Math.random() < riverTerminationProbability) {\r\n        break;\r\n      }\r\n\r\n      if (next) {\r\n        visited.add(`${next.x},${next.y}`);\r\n      }\r\n      current = next;\r\n    }\r\n  });\r\n}\r\n\r\nexport function drawMap(map, cellSize) {\r\n  console.log('Drawing map...');\r\n  const canvas = document.getElementById('map-canvas');\r\n  canvas.width = map[0].length * cellSize;\r\n  canvas.height = map.length * cellSize;\r\n  const ctx = canvas.getContext('2d');\r\n\r\n  // Очищаем холст перед отрисовкой новой карты\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n  // Дополнительная очистка с небольшим смещением\r\n  ctx.clearRect(-1, -1, canvas.width + 2, canvas.height + 2);\r\n\r\n  for (let y = 0; y < map.length; y++) {\r\n    for (let x = 0; x < map[y].length; x++) {\r\n      const info = map[y][x];\r\n      ctx.fillStyle = info.color;\r\n\r\n      if (info.type === terrainType.RIVER) {\r\n        const width = info.width;\r\n        if (width === 1) {\r\n          ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);\r\n        } else if (width === 2) {\r\n          ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);\r\n          ctx.fillRect((x - 1) * cellSize, y * cellSize, cellSize, cellSize);\r\n        } else if (width === 3) {\r\n          ctx.fillRect((x - 1) * cellSize, y * cellSize, cellSize, cellSize);\r\n          ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);\r\n          ctx.fillRect((x + 1) * cellSize, y * cellSize, cellSize, cellSize);\r\n        }\r\n      } else {\r\n        ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst cellSize = 3;\r\nlet mapGenerated = false;\r\n\r\nfunction drawStatusMessage(message) {\r\n  const statusMessage = document.getElementById('status-message');\r\n  statusMessage.textContent = message;\r\n  statusMessage.style.display = 'block';\r\n}\r\n\r\nfunction hideStatusMessage() {\r\n  const statusMessage = document.getElementById('status-message');\r\n  statusMessage.style.display = 'none';\r\n}\r\n\r\nasync function generateAndDrawMap() {\r\n  const mapWidthInput = document.getElementById('map-width');\r\n  const mapHeightInput = document.getElementById('map-height');\r\n  const mapWidth = parseInt(mapWidthInput.value, 10);\r\n  const mapHeight = parseInt(mapHeightInput.value, 10);\r\n\r\n  if (mapGenerated) {\r\n    location.reload();\r\n  } else {\r\n    console.log('Generating and drawing new map...');\r\n    drawStatusMessage('Generating map...');\r\n\r\n    const terrainSeed = generateRandomSeed();\r\n    const variantSeed = generateRandomSeed();\r\n    const biomeSeed = generateRandomSeed();\r\n\r\n    const worker = new Worker(new URL('./mapWorker.js', import.meta.url));\r\n    worker.postMessage({ mapWidth, mapHeight, terrainSeed, variantSeed, biomeSeed });\r\n\r\n    worker.onmessage = function(event) {\r\n      const map = event.data;\r\n      drawMap(map, cellSize);\r\n      hideStatusMessage();\r\n      mapGenerated = true;\r\n    };\r\n  }\r\n}\r\n\r\ndocument.getElementById('generate-map').addEventListener('click', generateAndDrawMap);","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendors-node_modules_open-simplex-noise_lib_mod_js\"], () => (__webpack_require__(\"./mapWorker.js\")))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".bundle.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = self.location + \"\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t\"mapWorker_js-test2_js\": 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunk\"] = self[\"webpackChunk\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(\"vendors-node_modules_open-simplex-noise_lib_mod_js\").then(next);\n};","","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n",""],"names":["createNoise","newFractalNoise","defaultOctaves","defaultFrequency","defaultPersistence","generateRandomSeed","generateMap","generateRivers","terrainType","self","onmessage","event","_event$data","data","mapWidth","mapHeight","terrainSeed","variantSeed","biomeSeed","terrainNoise","variantNoise","biomeNoise","getTerrainNoise","noise","octaves","frequency","persistence","getVariantNoise","getBiomeNoise","map","row","cell","type","MOUNTAIN","postMessage","makeNoise2D","Math","floor","random","pow","seed","info","_info$octaves","_info$amplitude","amplitude","_info$frequency","_info$persistence","getFractalNoise","x","y","value","octave","freq","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","l","f","s","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","_n","F","_arrayLikeToArray","toString","from","test","OCEAN","SEA","WET_SAND","SAND","DRY_SAND","DRY_GRASS","GRASS","WET_GRASS","MOUNTAIN_SNOW","MOUNTAIN_ORE","DESERT","RIVER","width","height","heightMap","terrainValue","variantValue","biomeValue","color","averageRiverLength","riverSources","directions","dx","dy","oppositeDirections","riverTerminationProbability","source","current","riverDirection","visited","Set","add","concat","riverLength","previousDirection","min","minHeight","possibleDirections","filter","dir","sort","_iterator","_step","ny","nx","has","err","drawMap","cellSize","console","log","canvas","document","getElementById","ctx","getContext","clearRect","fillStyle","fillRect","mapGenerated","drawStatusMessage","message","statusMessage","textContent","style","display","hideStatusMessage","generateAndDrawMap","_generateAndDrawMap","_callee","mapWidthInput","mapHeightInput","worker","_callee$","_context","parseInt","location","reload","Worker","URL","import","meta","url","addEventListener"],"sourceRoot":""}